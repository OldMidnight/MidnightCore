#!/system/bin/sh

#============================
# MAGISK ALIAS'
#============================
alias wget="/sbin/.core/busybox/wget"
alias unzip="/sbin/.core/busybox/unzip"
alias tar="/sbin/.core/busybox/tar"

#============================
# FUNCTIONS
#============================
main_download() {
    clear
    echo "[+] Downloading Zip..."
    wget --no-check-certificate -q -O $STOREMEDIA/$MEDIA2.zip "$LINK"
    if [ $? != 0 ]; then
        show_error "Media List not downloaded." "Bad Internet Connection." "Check your internet connection. Remove any active VPN(s)"
    fi
    echo "[+] Media Zip Downloaded!"
    unzip $STOREMEDIA/$MEDIA2.zip -d $STOREMEDIA > /dev/null 2>&1
    sort_zip
    echo -e $Y"$divider"$N
    echo -e $G"[+] Would you like to backup this zip?"$N
    echo -e $C"[+] This makes it easier to apply in the future."$N
    echo -e $C"[+] It also allows you to keep it during module updates."$N
    echo -e $W"[1] Backup - [2] Don't Backup"$N
    echo -e $Y"$divider"$N
    echo -e $W"[CHOOSE]:"$N
    read -r BACKUP
    case $BACKUP in
        1)
            echo "[+] Backing Up file: $MEDIA to: $MEDIABACKUP"
            dir=pwd
            cd $MEDIABACKUP > /dev/null 2>&1
            if [ "$manufacturer" == "HTC" ]; then
                tar -czf "$MEDIA2.tar.gz" -C $MODDIR$ANIMFOLDER $ANIM
                if [ $? != 0 ]; then
                    show_error "Backup not created" "Unknown" "Report error on XDA thread"
                fi
            else
                tar -czf "$MEDIA2.tar.gz" -C $MODDIR/media .
                if [ $? != 0 ]; then
                    show_error "Backup not created" "Unknown" "Report error on XDA thread"
                fi
            fi
            cd $dir > /dev/null 2>&1
            ;;
        2)
            echo "[+] Resuming Process..."
            ;;
        *)
            echo "[!] Invalid Input. Skipping Backup Process..."
            ;;
    esac
    rm -f $MIDMEDIA/currently_applied_media.txt > /dev/null 2>&1
    touch $MIDMEDIA/currently_applied_media.txt > /dev/null 2>&1
    echo $MEDIA > $MIDMEDIA/currently_applied_media.txt
    clear
    echo -e $Y"$divider"$N
    echo -e $G"                  [+] Media Files Applied!!           "$N
    echo -e $Y"$divider"$N
    echo -e $G"             [+] Reboot for changes to take effect    "$N
    echo -e $Y"$divider"$N
}

audio_choice() {
    echo "[+] Select a device to get these files from:"
    devices=$( cat $STOREMEDIA/audio-list | tr ' ' '*' )
    i=1
    for device in $devices; do
        word=$( echo $device | tr '*' ' ' )
        echo "$C[$i]$N $W$word$N"
        i=$((i+1))
    done
    audio_list_len=$( cat $STOREMEDIA/audio-list | wc -l )
    echo ""
    echo -e $W"[CHOOSE]:"$N
    read -r CHOICE
    case $CHOICE in
        $CHOICE)
            if [ $CHOICE -gt $audio_list_len ]; then
                echo "[!] Invalid Input!"
            else
                LINK="$( cat $STOREMEDIA/audio-link-list | xargs | cut -d '?' -f $CHOICE | tr -d ' ' )"
                MEDIA="$( cat $STOREMEDIA/audio-list | xargs | cut -d '.' -f $CHOICE )"
                MEDIA2="$( echo $MEDIA | cut -d ']' -f 2 | tr -d ' ' )"
                check_stored
            fi
            ;;
    esac
}

device_choice() {
    echo "[+] Select a device to get these files from:"
    i=1
    devices=$( cat $STOREMEDIA/media-list | tr ' ' '*' )
    for device in $devices; do
        word=$( echo $device | tr '*' ' ' )
        echo "$C[$i]$N $W$word$N"
        i=$((i+1))
    done
    device_list_len=$( cat $STOREMEDIA/media-list | wc -l )
    echo ""
    echo -e $W"[CHOOSE]:"$N
    read -r CHOICE
    case $CHOICE in
        $CHOICE)
            if [ $CHOICE -gt $device_list_len ]; then
                echo "[!] Invalid Input!"
            else
                LINK="$( cat $STOREMEDIA/media-link-list | xargs | cut -d '?' -f $CHOICE | tr -d ' ' )"
                MEDIA="$( cat $STOREMEDIA/media-list | xargs | cut -d '.' -f $CHOICE )"
                MEDIA2="$( echo $MEDIA | cut -d ']' -f 2 | tr -d ' ' )"
                check_stored
            fi
            ;;
    esac
}

check_stored() {
    clear
    echo "[+] Checking for saved version..."
    if [ -f "$MEDIABACKUP/$MEDIA2.tar.gz" ] && [ -s "$MEDIABACKUP/$MEDIA2.tar.gz" ]; then
        echo "[+] Saved version detected!"
        echo "[+] Applying Files..."
        mkdir $MODDIR/media > /dev/null 2>&1
        if [ "$manufacturer" == "HTC" ]; then
            mkdir -p $MODDIR$ANIMFOLDER
        fi
        dir=pwd
        cd $MEDIABACKUP
        if [ "$manufacturer" == "HTC" ]; then
            tar -xzf "$MEDIA2.tar.gz" -C $MODDIR$ANIMFOLDER
            if [ $? != 0 ]; then
                show_error "Backup not restored" "Unknown" "Report error on XDA thread"
            fi
        else
            tar -xzf "$MEDIA2.tar.gz" -C $MODDIR/media
            if [ $? != 0 ]; then
                show_error "Backup not restored" "Unknown" "Report error on XDA thread"
            fi
        fi
        cd $dir
        set_perm $MODDIR$ANIMFOLDER$ANIM 0 0 0644 > /dev/null 2>&1
        mk touch $MODDIR/audio/.replace > /dev/null 2>&1
        echo "[+] Setting audio file permissions..." > /dev/null 2>&1
        set_perm_recursive $MODDIR/audio 0 0 0755 > /dev/null 2>&1
        set_perm $MODDIR/audio/ui/*.ogg 0 0 0644 > /dev/null 2>&1
        set_perm $MODDIR/audio/notifications/*.ogg 0 0 0644 > /dev/null 2>&1
        set_perm $MODDIR/audio/alarms/*.ogg 0 0 0644 > /dev/null 2>&1
        set_perm $MODDIR/audio/ringtones/*.ogg 0 0 0644 > /dev/null 2>&1
        echo "[+] Permissions Set!"
        clear
        echo -e $Y"$divider"$N
        echo -e $G"            [+] Media Files Restored!!          "$N
        echo -e $Y"$divider"$N
        echo -e $G"       [+] Reboot for changes to take effect    "$N
        echo -e $Y"$divider"$N
    else
        echo "[#] Saved version not found or is empty!"
        echo "[+] Resuming Process"
        sleep 2
        main_download
    fi
}

sort_zip() {
    echo "[+] Sorting Zip..."
    if [ "$INPUT" == "b" ]; then
        mkdir -p $MODDIR$ANIMFOLDER > /dev/null 2>&1
        mv -f $STOREMEDIA/bootanimation.zip $MODDIR$ANIMFOLDER$ANIM
        set_perm $MODDIR$ANIMFOLDER$ANIM 0 0 0644
        echo "[+] Bootanimation Sorted!"
    elif [ "$INPUT" == "s" ]; then
        mkdir $MODDIR/media > /dev/null 2>&1
        mv -f $STOREMEDIA/audio $MODDIR/media > /dev/null 2>&1
        mktouch $MODDIR/audio/.replace
        echo "[+] Setting audio file permissions..."
        set_perm_recursive $MODDIR/audio 0 0 0755
        set_perm $MODDIR/audio/ui/*.ogg 0 0 0644
        set_perm $MODDIR/audio/notifications/*.ogg 0 0 0644
        set_perm $MODDIR/audio/alarms/*.ogg 0 0 0644
        set_perm $MODDIR/audio/ringtones/*.ogg 0 0 0644
        echo "[+] Permissions Set!"
    elif [ "$INPUT" == "m" ]; then
        if [ -d $STOREMEDIA/audio ]; then
            mkdir $MODDIR/media > /dev/null 2>&1
            if [ "$manufacturer" == "HTC" ]; then
                mkdir -p $MODDIR$ANIMFOLDER > /dev/null 2>&1
            fi
            echo "[+] Sorting Audio and bootanimation files..."
            mv -f $STOREMEDIA/bootanimation.zip $MODDIR$ANIMFOLDER$ANIM > /dev/null 2>&1
            set_perm $MODDIR$ANIMFOLDER$ANIM 0 0 0644
            echo "[+] Bootanimation sorted!"
            mv -f $STOREMEDIA/audio $MODDIR/media > /dev/null 2>&1
            mktouch $MODDIR/audio/.replace
            echo "[+] Setting audio file permissions..."
            set_perm_recursive $MODDIR/audio 0 0 0755
            set_perm $MODDIR/audio/ui/*.ogg 0 0 0644
            set_perm $MODDIR/audio/notifications/*.ogg 0 0 0644
            set_perm $MODDIR/audio/alarms/*.ogg 0 0 0644
            set_perm $MODDIR/audio/ringtones/*.ogg 0 0 0644
            echo "[+] Permissions Set!"
        elif [ ! -d $STOREMEDIA/audio ]; then
            echo "[+] This option only contains a bootanimation file."
            echo "[+] Would you like to continue anyways:"
            echo "[1] Yes - [2] No"
            pass=true
            while [ "$pass" == true ]; do
                echo -e $W"[CHOOSE]:"$N
                read -r BOTH
                case $BOTH in
                    y)
                        mkdir -p $MODDIR$ANIMFOLDER
                        mv -f $STOREMEDIA/bootanimation.zip $MODDIR$ANIMFOLDER$ANIM > /dev/null 2>&1
                        set_perm $MODDIR$ANIMFOLDER$ANIM 0 0 0644
                        echo "[+] Bootanimation sorted"
                        pass=false
                        ;;
                    n)
                        echo "[+] Resuming Process..."
                        pass=false
                        ;;
                    *)
                        echo "[!] Invalid Input."
                        ;;
                esac
            done
        elif [ ! -f $STOREMEDIA/bootanimation.zip ]; then
            echo "[+] This option only contains an Audio folder."
            echo "[+] Would you like to continue anyways:"
            echo "[1] Yes - [2] No"
            pass=true
            while [ "$pass" == true ]; do
                echo -e $W"[CHOOSE]:"$N
                read -r BOTH
                case $BOTH in
                    y)
                        mkdir $MODDIR/media > /dev/null 2>&1
                        mv -f $STOREMEDIA/audio $MODDIR/media > /dev/null 2>&1
                        mktouch $MODDIR/audio/.replace
                        echo "[+] Setting audio file permissions..."
                        set_perm_recursive $MODDIR/audio 0 0 0755
                        set_perm $MODDIR/audio/ui/*.ogg 0 0 0644
                        set_perm $MODDIR/audio/notifications/*.ogg 0 0 0644
                        set_perm $MODDIR/audio/alarms/*.ogg 0 0 0644
                        set_perm $MODDIR/audio/ringtones/*.ogg 0 0 0644
                        echo "[+] Permissions Set!"
                        pass=false
                        ;;
                    n)
                        echo "[+] Resuming Process..."
                        pass=false
                        ;;
                    *)
                        echo "[!] Invalid Input."
                esac
            done
        fi
    fi
}

apply_custom() {
    clear
    echo -e $Y"$divider"$N
    echo -e $B"[#] Specify Custom Media Files!"$N
    sleep 0.3
    echo -e $P"[+] Here you can choose from a list of available bootanimations and audio files you have created in $CUSTOMMEDIA."$N
    echo -e $B"[+] Steps to apply your custom BOOTANIMATION:"$N
    sleep 0.3
    echo -e $R"[!] This works for all oems including Samsung and HTC!!"$N
    sleep 0.3
    echo -e $P"[1] Create a folder in $CUSTOMMEDIA/bootanimation named after the name of the bootanimation."$N
    sleep 0.3
    echo -e $P"[2] Make sure the bootanimation zip/qmg file is structured correctly."$N
    sleep 0.3
    echo -e $P"[3] Place the bootanimation file in the named folder"$N
    sleep 0.3
    echo -e $P"[4] Return to this screen"$N
    sleep 0.3
    echo -e $P"[5] Apply bootanimation!"$N
    sleep 0.3
    echo -e $Y"$divider"$N
    echo -e $B"[+] Steps to apply your custom AUDIO FILES:"$N
    sleep 0.3
    echo -e $P"[1] Create a folder in $CUSTOMMEDIA/audio. Give it a name you will recognize later on."$N
    sleep 0.3
    echo -e $P"[2] Place the audio folders into this folder."$N
    sleep 0.3
    echo -e $R"    [!] Acceptable folders:"$N
    echo -e $P"    [1] alarms"$N
    echo -e $P"    [2] notifications"$N
    echo -e $P"    [3] ringtones"$N
    echo -e $P"    [4] ui"$N
    echo -e $P"[3] Return to this screen"$N
    echo -e $P"[4] Apply Media files!"$N
    echo -e $Y"$divider"$N
    sleep 0.3
    animnum=$( ls $CUSTOMANIM | wc -l )
    audionum=$( ls $CUSTOMAUDIO | wc -l )
    echo -e $G"[!] Number of custom bootanimations found: $animnum"$N
    sleep 0.3
    echo -e $G"[!] Number of custom audio files found: $audionum"$N
    sleep 0.3
    echo -e $B"[#] Selection:"$N
    sleep 0.3
    if [ $animnum -gt 0 ]; then
        echo "[b] Continue to custom Bootanimation selection?"
    fi
    if [ $audionum -gt 0 ]; then
        echo "[a] Continue to custom audio selection?"
    fi
    if [ $audionum -eq 0 ] && [ $animnum -eq 0 ]; then
        echo -e $R"[!] There are no custom files to apply!"$N
    fi
    echo -e $R"[q] Quit"$N
    echo ""
    custpass=true
    while [ "$custpass" == true ]; do
        echo -e $W"[CHOOSE]:"$N
        read -r CHOICE
        case $CHOICE in
            b)
                if [ $animnum -eq 0 ]; then
                    echo -e $R"[!] There are no custom bootanimation files to apply!"$N
                else
                    clear
                    echo -e $B"[#] Custom Bootanimations:"$N
                    anims=$( ls $CUSTOMANIM )
                    i=1
                    for anim in $anims; do
                        echo "[$i] $anim"
                        i=$((i+1))
                    done
                    echo "[q] Quit"
                    animspass=true
                    while [ "$animspass" == true ]; do
                        echo -e $W"[CHOOSE]:"$N
                        read -r CHOICE
                        case $CHOICE in
                            $CHOICE)
                                if [ "$CHOICE" == "q" ]; then
                                    animspass=false
                                    custpass=false
                                elif [ $CHOICE -gt $animnum ]; then
                                    echo "[!] Invalid Input."
                                else
                                    clear
                                    CUSTANIMFOLDER=$( ls $CUSTOMANIM | xargs | tr ' ' '*' | cut -d '*' -f $CHOICE )
                                    echo "[+] Applying $CUSTANIMFOLDER"
                                    mkdir -p $MODDIR$ANIMFOLDER > /dev/null 2>&1
                                    file=$( ls $CUSTOMANIM/$CUSTOMANIMFOLDER )
                                    cp -f $CUSTOMANIM/$CUSTOMANIMFOLDER/$file $MODDIR$ANIMFOLDER
                                    echo "[+] Setting Permissions..."
                                    set_perm_recursive $MODDIR$ANIMFOLDER 0 0 0755 0644
                                    echo "[+] Permissions set!"
                                    animspass=false
                                    custpass=false
                                fi
                                ;;
                        esac
                    done
                fi
                ;;
            a)
                if [ $audionum -eq 0 ]; then
                    echo -e $R"[!] There are no custom audio files to apply!"$N
                else
                    clear
                    echo -e $B"[#] Custom Audio Files:"$N
                    audios=$( ls $CUSTOMANIM )
                    i=1
                    for audio in $audios; do
                        echo "[$i] $audio"
                        i=$((i+1))
                    done
                    echo "[q] Quit"
                    audiopass=true
                    while [ "$audiopass" == true ]; do
                        echo -e $W"[CHOOSE]:"$N
                        read -r CHOICE
                        case $CHOICE in
                            $CHOICE)
                                if [ "$CHOICE" == "q" ]; then
                                    audiopass=false
                                    custpass=false
                                elif [ $CHOICE -gt $audionum ]; then
                                    echo "[!] Invalid Input."
                                else
                                    clear
                                    CUSTAUDIOFOLDER=$( ls $CUSTOMAUDIO | xargs | tr ' ' '*' | cut -d '*' -f $CHOICE )
                                    echo "[+] Applying $CUSTAUDIOFOLDER"
                                    mkdir -p $MODDIR/media > /dev/null 2>&1
                                    file=$( ls $CUSTOMAUDIO/$CUSTOMAUDIOFOLDER )
                                    cp -f $CUSTOMAUDIO/$CUSTOMAUDIOFOLDER/$file $MODDIR/media
                                    mktouch $MODDIR/media/audio/.replace
                                    echo "[+] Setting audio file permissions..."
                                    set_perm_recursive $MODDIR/fmedia/audio 0 0 0755
                                    set_perm $MODDIR/audio/ui/*.ogg 0 0 0644
                                    set_perm $MODDIR/audio/notifications/*.ogg 0 0 0644
                                    set_perm $MODDIR/audio/alarms/*.ogg 0 0 0644
                                    set_perm $MODDIR/audio/ringtones/*.ogg 0 0 0644
                                    echo "[+] Permissions Set!"
                                    animspass=false
                                    custpass=false
                                fi
                                ;;
                        esac
                    done
                fi
                ;;
            q)
                custpass=false
                ;;
            *)
                echo -e $R"[!] Invalid Input."$N
                ;;
        esac
    done
}
#============================
#============================
