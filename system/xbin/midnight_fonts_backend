#!/system/bin/sh

#===============================
# MAGISK ALIAS'
#===============================
alias rev="/sbin/.core/busybox/rev"
alias unzip="/sbin/.core/busybox/unzip"
alias awk="/sbin/.core/busybox/awk"
alias wget="/sbin/.core/busybox/wget"
#===============================
# FUNCTIONS
#===============================
get_font () {
    echo "[+] Retrieving Font..."
    if [ -f "$STOREFONT/$FONT2.zip" ]; then
        set_perm $STOREFONT/$FONT2.zip 0 0 0777
        echo "[+] Working..."
    else
        show_error "Permissions not set on Font zip." "Zip Not downloaded." "Check your internet connection. Remove any active VPN(s)."
    fi
}

zip_sort_no_store() {
    clear
    if [ -d "$STOREFONT/system" ]; then
        echo "[+] Working..."
        mkdir $MODDIR/fonts > /dev/null 2>&1
        cp -f $STOREFONT/system/fonts/* $MODDIR/fonts > /dev/null 2>&1
        set_perm $DIR/fonts/* 0 0 0644 > /dev/null 2>&1
        rm -f $MIDFONT/currently_applied_font.txt > /dev/null 2>&1
        touch $MIDFONT/currently_applied_font.txt > /dev/null 2>&1
        echo $FONT > $MIDFONT/currently_applied_font.txt
        clear
        echo -e $G"           [+] Font Applied!!             "$N
        echo -e $Y"$divider"$N
        echo -e $R" [+] Reboot for changes to take effect!!  "$N
        echo -e $Y"$divider"$N
    fi
}

zip_sort_store() {
    clear
    if [ -d $STOREFONT/system ]; then
        echo "[+] Working..."
        echo "[+] Saving font to $FONTBACKUP..."
        mkdir $MODDIR/fonts > /dev/null 2>&1
        cp -f $STOREFONT/system/fonts/* $MODDIR/fonts > /dev/null 2>&1
        set_perm $MODDIR/fonts/* 0 0 0644
        dir=pwd
        cd $FONTBACKUP > /dev/null 2>&1
        tar -czf "$FONT2.tar.gz" -C $MODDIR/fonts .
        if [ $? != 0 ]; then
            show_error "Backup not created" "Unknown." "Report error on XDA thread."
        fi
        cd $dir > /dev/null 2>&1
        rm -f $MIDFONT/currently_applied_font.txt > /dev/null 2>&1
        touch $MIDFONT/currently_applied_font.txt > /dev/null 2>&1
        echo $FONT > $MIDFONT/currently_applied_font.txt
        clear
        echo -e $Y"$divider"$N
        echo -e $G"           [+] Font Applied and Saved!!        "$N
        echo -e $Y"$divider"$N
        echo -e $R"      [+] Reboot for changes to take effect!!  "$N
        echo -e $Y"$divider"$N
    fi
}

other_steps() {
    clear
    wget --no-check-certificate -q -O $STOREFONT/$FONT2.zip "$LINK"
    get_font
    unzip $STOREFONT/$FONT2.zip -d "$STOREFONT"
    if [ "$LOCALCHOICE" == "1" ]; then
        zip_sort_store
    else
        zip_sort_no_store
    fi
}

font_steps() {
    echo ""
    echo -e $B"[#] Save Font Offline?"$N
    echo -e $G"[1] Save Font     [2] Don't Save Font"$N
    echo -e -n $W"[CHOOSE]: "$N
    read -r LOCALCHOICE
    other_steps
}

check_stored() {
    clear
    echo "[+] Checking for saved version..."
    if [ -f "$FONTBACKUP/$FONT2.tar.gz" ]; then
        echo "[+] Saved version detected!"
        echo "[+] Applying Font..."
        dir=pwd
        cd $FONTBACKUP
        mkdir $MODDIR/fonts > /dev/null 2>&1
        tar -xzf "$FONT2.tar.gz" -C $MODDIR/fonts
        if [ $? != 0 ]; then
            show_error "Backup not restored" "Unknown." "Report error on XDA thread."
        fi
        cd $dir
        chmod 644 $MODDIR/fonts/*
        rm -f $MIDFONT/currently_applied_font.txt > /dev/null 2>&1
        touch $MIDFONT/currently_applied_font.txt > /dev/null 2>&1
        echo $FONT > $MIDFONT/currently_applied_font.txt
        clear
        echo -e $G"           [+] Font Applied!!             "$N
        echo -e $Y"$divider"$N
        echo -e $R" [+] Reboot for changes to take effect!!  "$N
        echo -e $Y"$divider"$N
        restored=true
    else
        echo "[#] Saved version not found!"
        echo "[+] Resuming Process.."
        restored=false
    fi
}

apply_custom() {
    clear
    echo -e $Y"$divider"$N
    echo -e $B"[#] Specify Custom Fonts!"$N
    sleep 0.3
    echo -e $P"[+] Here you can choose from the list of available custom fonts you have created in the $CUSTOMFONT folder"$N
    echo -e $B"[+] Steps to create your custom font:"$N
    sleep 0.3
    echo -e $G"[1] Create a folder named after the font you want to apply"$N
    sleep 0.3
    echo -e $G"[2] Place the correct font weights in this file, renamed to mimic Roboto Fonts"$N
    sleep 0.3
    echo -e $R"     [!] For optiomal results include font weights such as:"$N
    echo -e $P"     [1] Regular e.g 'Roboto-Regular.ttf"$N
    echo -e $P"     [2] Italic"$N
    echo -e $P"     [3] Bold"$N
    echo -e $P"     [4] Bold-Italic"$N
    echo -e $P"     [5] Light"$N
    echo -e $P"     [6] Light-Italic"$N
    echo -e $P"     [7] Condensed Variants"$N
    echo -e $R"     [!] These font weights are not necessary but are recommended"$N
    sleep 0.3
    echo -e $G"[3] Return back to this screen"$N
    sleep 0.3
    echo -e $G"[4] Apply Fonts!"$N
    sleep 0.3
    echo -e $Y"$divider"$N
    fontnum=$( ls $CUSTOMFONT | wc -l )
    sleep 0.4
    echo -e $G"[!] Number of Custom fonts found: $fontnum"$N
    if [ $fontnum -eq 0 ]; then
        echo -e $R"[!] No available custom fonts!"$N
        echo -e $R"[q] Quit"$N
    else
        echo -e $B"[+] Proceed to font selection?"$N
        echo -e $G"[1] Continue - [2] Return to Normal font selection"$N
    fi
    echo -e $W"[CHOOSE]:"$N
    read -r CUSTFONTCHOICE
    case $CUSTFONTCHOICE in
        1)
            if [ $fontnum -eq 0 ]; then
                echo -e $R"[!] Invalid Input."$N
                pass=false
            else
                clear
                echo -e $B"[#] Custom Fonts:"$N
                fonts=$( ls $CUSTOMFONT | tr ' ' '*' )
                i=1
                for font in $fonts; do
                    word=$( echo $font | tr '*' ' ' )
                    echo "$C[$i]$N $W$word$N"
                       i=$((i+1))
                done
                echo "[q] Quit"
                custpass=true
                while [ "$custpass" == true ]; do
                    echo -e $W"[CHOOSE]:"$N
                    read -r CHOICE
                    case $CHOICE in
                        $CHOICE)
                            if [ "$CHOICE" == "q" ]; then
                                custpass=false
                                pass=false
                            elif [ $CHOICE -gt $fontnum ]; then
                                echo -e $R"[!] Invalid Input."$N
                            else
                                clear
                                FONT="$( ls $CUSTOMFONT | xargs | tr ' ' '*' | cut -d '*' -f $CHOICE )"
                                echo "[+] Applying $FONT..."
                                mkdir $MODDIR/fonts > /dev/null 2>&1
                                cp -f $CUSTOMFONT/$FONT/* $MODDIR/fonts
                                echo "[+] Setting Permissions..."
                                set_perm $MODDIR/fonts/* 0 0 0644
                                   echo "[+] Permissions Set!"
                                custpass=false
                                pass=false
                                main=false
                            fi
                            ;;
                    esac
                done
            fi
            ;;
        2)
            pass=false
            ;;
        q)
            pass=false
            ;;
        *)
            echo -e $R"[!] Invalid Input."$N
            ;;
    esac

}
